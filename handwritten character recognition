2-handwritten character recognition 

data preprocessing 

import numpy as np
import matplotlib.pyplot as plt
from emnist import extract_training_samples, extract_test_samples
from tensorflow.keras.utils import to_categorical

# Load EMNIST dataset (Letters)
X_train, y_train = extract_training_samples('letters')
X_test, y_test = extract_test_samples('letters')

# Reshape the data
X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)
X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)

# Normalize the data (scale the values between 0 and 1)
X_train = X_train.astype('float32') / 255
X_test = X_test.astype('float32') / 255

# Convert labels to categorical (one-hot encoding)
y_train = to_categorical(y_train - 1, num_classes=26)  # 26 letters (A-Z)
y_test = to_categorical(y_test - 1, num_classes=26)

# Visualize some sample images
plt.figure(figsize=(10, 4))
for i in range(10):
    plt.subplot(2, 5, i + 1)
    plt.imshow(X_train[i].reshape(28, 28), cmap='gray')
    plt.axis('off')
plt.show()


model building 

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

# Build the CNN model
model = Sequential()

# First Convolutional Layer
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D(pool_size=(2, 2)))

# Second Convolutional Layer
model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

# Flatten the data for fully connected layers
model.add(Flatten())

# Fully connected Dense layers
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(64, activation='relu'))
model.add(Dense(26, activation='softmax'))  # 26 output classes (A-Z)

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Summary of the model
model.summary()


model training 


# Train the model
history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=128)

# Save the trained model
model.save('handwritten_character_recognition.h5')


model evaluation 



# Evaluate the model
test_loss, test_acc = model.evaluate(X_test, y_test, verbose=2)
print(f'Test accuracy: {test_acc * 100:.2f}%')



prediction on new characters 



import numpy as np

# Load model for prediction
model = tf.keras.models.load_model('handwritten_character_recognition.h5')

# Pick a random image from the test set
random_idx = np.random.randint(0, len(X_test))
test_image = X_test[random_idx].reshape(1, 28, 28, 1)

# Predict the character
prediction = model.predict(test_image)
predicted_label = np.argmax(prediction)

# Map the predicted label to the corresponding letter (A-Z)
predicted_char = chr(predicted_label + ord('A'))
print(f'The predicted character is: {predicted_char}')

# Plot the image
plt.imshow(test_image.reshape(28, 28), cmap='gray')
plt.title(f'Predicted: {predicted_char}')
plt.show()


